// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_entry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_msg {
class LogEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogEntry> {
} _LogEntry_default_instance_;

namespace protobuf_log_5fentry_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, command_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, entry_),
  1,
  2,
  3,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(LogEntry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogEntry_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "log_entry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _LogEntry_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::raft_msg::protobuf_raft_5fenum_2eproto::InitDefaults();
  _LogEntry_default_instance_.DefaultConstruct();
  _LogEntry_default_instance_.get_mutable()->entry_ = const_cast< ::raft_msg::KVEntry*>(
      ::raft_msg::KVEntry::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017log_entry.proto\022\010raft_msg\032\017raft_enum.p"
      "roto\"v\n\010LogEntry\022\r\n\005index\030\001 \002(\004\022\014\n\004term\030"
      "\002 \002(\004\022+\n\014command_type\030\003 \002(\0162\025.raft_msg.C"
      "ommandType\022 \n\005entry\030\004 \002(\0132\021.raft_msg.KVE"
      "ntry"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_entry.proto", &protobuf_RegisterTypes);
  ::raft_msg::protobuf_raft_5fenum_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_log_5fentry_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kIndexFieldNumber;
const int LogEntry::kTermFieldNumber;
const int LogEntry::kCommandTypeFieldNumber;
const int LogEntry::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5fentry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_msg.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entry()) {
    entry_ = new ::raft_msg::KVEntry(*from.entry_);
  } else {
    entry_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&command_type_) -
    reinterpret_cast<char*>(&index_) + sizeof(command_type_));
  // @@protoc_insertion_point(copy_constructor:raft_msg.LogEntry)
}

void LogEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&entry_, 0, reinterpret_cast<char*>(&command_type_) -
    reinterpret_cast<char*>(&entry_) + sizeof(command_type_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raft_msg.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete entry_;
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_log_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5fentry_2eproto::file_level_metadata[0].descriptor;
}

const LogEntry& LogEntry::default_instance() {
  protobuf_log_5fentry_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogEntry* LogEntry::New(::google::protobuf::Arena* arena) const {
  LogEntry* n = new LogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_msg.LogEntry)
  if (has_entry()) {
    GOOGLE_DCHECK(entry_ != NULL);
    entry_->::raft_msg::KVEntry::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&index_, 0, reinterpret_cast<char*>(&command_type_) -
      reinterpret_cast<char*>(&index_) + sizeof(command_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_msg.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 index = 1;
      case 1: {
        if (tag == 8u) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 term = 2;
      case 2: {
        if (tag == 16u) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .raft_msg.CommandType command_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_msg::CommandType_IsValid(value)) {
            set_command_type(static_cast< ::raft_msg::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .raft_msg.KVEntry entry = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_msg.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_msg.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_msg.LogEntry)
  // required uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // required uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // required .raft_msg.CommandType command_type = 3;
  if (has_command_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->command_type(), output);
  }

  // required .raft_msg.KVEntry entry = 4;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->entry_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_msg.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_msg.LogEntry)
  // required uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // required uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // required .raft_msg.CommandType command_type = 3;
  if (has_command_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->command_type(), target);
  }

  // required .raft_msg.KVEntry entry = 4;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->entry_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_msg.LogEntry)
  return target;
}

size_t LogEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_msg.LogEntry)
  size_t total_size = 0;

  if (has_entry()) {
    // required .raft_msg.KVEntry entry = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entry_);
  }

  if (has_index()) {
    // required uint64 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  if (has_term()) {
    // required uint64 term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_command_type()) {
    // required .raft_msg.CommandType command_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_type());
  }

  return total_size;
}
size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_msg.LogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .raft_msg.KVEntry entry = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entry_);

    // required uint64 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());

    // required uint64 term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required .raft_msg.CommandType command_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_msg.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_msg.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_msg.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_msg.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_entry()) {
      mutable_entry()->::raft_msg::KVEntry::MergeFrom(from.entry());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_command_type()) {
      set_command_type(from.command_type());
    }
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_msg.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_msg.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_entry()) {
    if (!this->entry_->IsInitialized()) return false;
  }
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  std::swap(entry_, other->entry_);
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  std::swap(command_type_, other->command_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_log_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5fentry_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogEntry

// required uint64 index = 1;
bool LogEntry::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogEntry::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void LogEntry::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogEntry::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
::google::protobuf::uint64 LogEntry::index() const {
  // @@protoc_insertion_point(field_get:raft_msg.LogEntry.index)
  return index_;
}
void LogEntry::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_msg.LogEntry.index)
}

// required uint64 term = 2;
bool LogEntry::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogEntry::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
void LogEntry::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogEntry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
::google::protobuf::uint64 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:raft_msg.LogEntry.term)
  return term_;
}
void LogEntry::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_msg.LogEntry.term)
}

// required .raft_msg.CommandType command_type = 3;
bool LogEntry::has_command_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogEntry::set_has_command_type() {
  _has_bits_[0] |= 0x00000008u;
}
void LogEntry::clear_has_command_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogEntry::clear_command_type() {
  command_type_ = 0;
  clear_has_command_type();
}
::raft_msg::CommandType LogEntry::command_type() const {
  // @@protoc_insertion_point(field_get:raft_msg.LogEntry.command_type)
  return static_cast< ::raft_msg::CommandType >(command_type_);
}
void LogEntry::set_command_type(::raft_msg::CommandType value) {
  assert(::raft_msg::CommandType_IsValid(value));
  set_has_command_type();
  command_type_ = value;
  // @@protoc_insertion_point(field_set:raft_msg.LogEntry.command_type)
}

// required .raft_msg.KVEntry entry = 4;
bool LogEntry::has_entry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogEntry::set_has_entry() {
  _has_bits_[0] |= 0x00000001u;
}
void LogEntry::clear_has_entry() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogEntry::clear_entry() {
  if (entry_ != NULL) entry_->::raft_msg::KVEntry::Clear();
  clear_has_entry();
}
const ::raft_msg::KVEntry& LogEntry::entry() const {
  // @@protoc_insertion_point(field_get:raft_msg.LogEntry.entry)
  return entry_ != NULL ? *entry_
                         : *::raft_msg::KVEntry::internal_default_instance();
}
::raft_msg::KVEntry* LogEntry::mutable_entry() {
  set_has_entry();
  if (entry_ == NULL) {
    entry_ = new ::raft_msg::KVEntry;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.LogEntry.entry)
  return entry_;
}
::raft_msg::KVEntry* LogEntry::release_entry() {
  // @@protoc_insertion_point(field_release:raft_msg.LogEntry.entry)
  clear_has_entry();
  ::raft_msg::KVEntry* temp = entry_;
  entry_ = NULL;
  return temp;
}
void LogEntry::set_allocated_entry(::raft_msg::KVEntry* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    set_has_entry();
  } else {
    clear_has_entry();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.LogEntry.entry)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_msg

// @@protoc_insertion_point(global_scope)
