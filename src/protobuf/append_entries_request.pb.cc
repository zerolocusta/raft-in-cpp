// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: append_entries_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "append_entries_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_msg {
class AppendEntriesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesRequest> {
} _AppendEntriesRequest_default_instance_;

namespace protobuf_append_5fentries_5frequest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, prev_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, prev_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, commit_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, leader_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, entries_),
  1,
  2,
  3,
  4,
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(AppendEntriesRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AppendEntriesRequest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "append_entries_request.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _AppendEntriesRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::raft_msg::protobuf_log_5fentry_2eproto::InitDefaults();
  _AppendEntriesRequest_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\034append_entries_request.proto\022\010raft_msg"
      "\032\017log_entry.proto\"\243\001\n\024AppendEntriesReque"
      "st\022\014\n\004term\030\001 \002(\004\022\026\n\016prev_log_index\030\002 \002(\004"
      "\022\025\n\rprev_log_term\030\003 \002(\004\022\024\n\014commit_index\030"
      "\004 \002(\004\022\023\n\013leader_name\030\005 \002(\t\022#\n\007entries\030\006 "
      "\003(\0132\022.raft_msg.LogEntry"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "append_entries_request.proto", &protobuf_RegisterTypes);
  ::raft_msg::protobuf_log_5fentry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_append_5fentries_5frequest_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesRequest::kTermFieldNumber;
const int AppendEntriesRequest::kPrevLogIndexFieldNumber;
const int AppendEntriesRequest::kPrevLogTermFieldNumber;
const int AppendEntriesRequest::kCommitIndexFieldNumber;
const int AppendEntriesRequest::kLeaderNameFieldNumber;
const int AppendEntriesRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesRequest::AppendEntriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_append_5fentries_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_msg.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_name()) {
    leader_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
  }
  ::memcpy(&term_, &from.term_,
    reinterpret_cast<char*>(&commit_index_) -
    reinterpret_cast<char*>(&term_) + sizeof(commit_index_));
  // @@protoc_insertion_point(copy_constructor:raft_msg.AppendEntriesRequest)
}

void AppendEntriesRequest::SharedCtor() {
  _cached_size_ = 0;
  leader_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, reinterpret_cast<char*>(&commit_index_) -
    reinterpret_cast<char*>(&term_) + sizeof(commit_index_));
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:raft_msg.AppendEntriesRequest)
  SharedDtor();
}

void AppendEntriesRequest::SharedDtor() {
  leader_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesRequest::descriptor() {
  protobuf_append_5fentries_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_append_5fentries_5frequest_2eproto::file_level_metadata[0].descriptor;
}

const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  protobuf_append_5fentries_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

AppendEntriesRequest* AppendEntriesRequest::New(::google::protobuf::Arena* arena) const {
  AppendEntriesRequest* n = new AppendEntriesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_msg.AppendEntriesRequest)
  entries_.Clear();
  if (has_leader_name()) {
    GOOGLE_DCHECK(!leader_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*leader_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&term_, 0, reinterpret_cast<char*>(&commit_index_) -
      reinterpret_cast<char*>(&term_) + sizeof(commit_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AppendEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_msg.AppendEntriesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8u) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 prev_log_index = 2;
      case 2: {
        if (tag == 16u) {
          set_has_prev_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 prev_log_term = 3;
      case 3: {
        if (tag == 24u) {
          set_has_prev_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 commit_index = 4;
      case 4: {
        if (tag == 32u) {
          set_has_commit_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string leader_name = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "raft_msg.AppendEntriesRequest.leader_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raft_msg.LogEntry entries = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_msg.AppendEntriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_msg.AppendEntriesRequest)
  return false;
#undef DO_
}

void AppendEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_msg.AppendEntriesRequest)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required uint64 prev_log_index = 2;
  if (has_prev_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->prev_log_index(), output);
  }

  // required uint64 prev_log_term = 3;
  if (has_prev_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->prev_log_term(), output);
  }

  // required uint64 commit_index = 4;
  if (has_commit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->commit_index(), output);
  }

  // required string leader_name = 5;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_msg.AppendEntriesRequest.leader_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->leader_name(), output);
  }

  // repeated .raft_msg.LogEntry entries = 6;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_msg.AppendEntriesRequest)
}

::google::protobuf::uint8* AppendEntriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_msg.AppendEntriesRequest)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required uint64 prev_log_index = 2;
  if (has_prev_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->prev_log_index(), target);
  }

  // required uint64 prev_log_term = 3;
  if (has_prev_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->prev_log_term(), target);
  }

  // required uint64 commit_index = 4;
  if (has_commit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->commit_index(), target);
  }

  // required string leader_name = 5;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_msg.AppendEntriesRequest.leader_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leader_name(), target);
  }

  // repeated .raft_msg.LogEntry entries = 6;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->entries(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_msg.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_msg.AppendEntriesRequest)
  size_t total_size = 0;

  if (has_leader_name()) {
    // required string leader_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_name());
  }

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_prev_log_index()) {
    // required uint64 prev_log_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_index());
  }

  if (has_prev_log_term()) {
    // required uint64 prev_log_term = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_term());
  }

  if (has_commit_index()) {
    // required uint64 commit_index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_index());
  }

  return total_size;
}
size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_msg.AppendEntriesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string leader_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_name());

    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required uint64 prev_log_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_index());

    // required uint64 prev_log_term = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_term());

    // required uint64 commit_index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .raft_msg.LogEntry entries = 6;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_msg.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_msg.AppendEntriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_msg.AppendEntriesRequest)
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_msg.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_leader_name()) {
      set_has_leader_name();
      leader_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_prev_log_index()) {
      set_prev_log_index(from.prev_log_index());
    }
    if (from.has_prev_log_term()) {
      set_prev_log_term(from.prev_log_term());
    }
    if (from.has_commit_index()) {
      set_commit_index(from.commit_index());
    }
  }
}

void AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_msg.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_msg.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void AppendEntriesRequest::Swap(AppendEntriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  leader_name_.Swap(&other->leader_name_);
  std::swap(term_, other->term_);
  std::swap(prev_log_index_, other->prev_log_index_);
  std::swap(prev_log_term_, other->prev_log_term_);
  std::swap(commit_index_, other->commit_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {
  protobuf_append_5fentries_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_append_5fentries_5frequest_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppendEntriesRequest

// required uint64 term = 1;
bool AppendEntriesRequest::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AppendEntriesRequest::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
void AppendEntriesRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void AppendEntriesRequest::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
::google::protobuf::uint64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:raft_msg.AppendEntriesRequest.term)
  return term_;
}
void AppendEntriesRequest::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_msg.AppendEntriesRequest.term)
}

// required uint64 prev_log_index = 2;
bool AppendEntriesRequest::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AppendEntriesRequest::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
void AppendEntriesRequest::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_index();
}
::google::protobuf::uint64 AppendEntriesRequest::prev_log_index() const {
  // @@protoc_insertion_point(field_get:raft_msg.AppendEntriesRequest.prev_log_index)
  return prev_log_index_;
}
void AppendEntriesRequest::set_prev_log_index(::google::protobuf::uint64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:raft_msg.AppendEntriesRequest.prev_log_index)
}

// required uint64 prev_log_term = 3;
bool AppendEntriesRequest::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AppendEntriesRequest::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
void AppendEntriesRequest::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_term();
}
::google::protobuf::uint64 AppendEntriesRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:raft_msg.AppendEntriesRequest.prev_log_term)
  return prev_log_term_;
}
void AppendEntriesRequest::set_prev_log_term(::google::protobuf::uint64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:raft_msg.AppendEntriesRequest.prev_log_term)
}

// required uint64 commit_index = 4;
bool AppendEntriesRequest::has_commit_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AppendEntriesRequest::set_has_commit_index() {
  _has_bits_[0] |= 0x00000010u;
}
void AppendEntriesRequest::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void AppendEntriesRequest::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
::google::protobuf::uint64 AppendEntriesRequest::commit_index() const {
  // @@protoc_insertion_point(field_get:raft_msg.AppendEntriesRequest.commit_index)
  return commit_index_;
}
void AppendEntriesRequest::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
  // @@protoc_insertion_point(field_set:raft_msg.AppendEntriesRequest.commit_index)
}

// required string leader_name = 5;
bool AppendEntriesRequest::has_leader_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AppendEntriesRequest::set_has_leader_name() {
  _has_bits_[0] |= 0x00000001u;
}
void AppendEntriesRequest::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void AppendEntriesRequest::clear_leader_name() {
  leader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_name();
}
const ::std::string& AppendEntriesRequest::leader_name() const {
  // @@protoc_insertion_point(field_get:raft_msg.AppendEntriesRequest.leader_name)
  return leader_name_.GetNoArena();
}
void AppendEntriesRequest::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  leader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_msg.AppendEntriesRequest.leader_name)
}
#if LANG_CXX11
void AppendEntriesRequest::set_leader_name(::std::string&& value) {
  set_has_leader_name();
  leader_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_msg.AppendEntriesRequest.leader_name)
}
#endif
void AppendEntriesRequest::set_leader_name(const char* value) {
  set_has_leader_name();
  leader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_msg.AppendEntriesRequest.leader_name)
}
void AppendEntriesRequest::set_leader_name(const char* value, size_t size) {
  set_has_leader_name();
  leader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_msg.AppendEntriesRequest.leader_name)
}
::std::string* AppendEntriesRequest::mutable_leader_name() {
  set_has_leader_name();
  // @@protoc_insertion_point(field_mutable:raft_msg.AppendEntriesRequest.leader_name)
  return leader_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppendEntriesRequest::release_leader_name() {
  // @@protoc_insertion_point(field_release:raft_msg.AppendEntriesRequest.leader_name)
  clear_has_leader_name();
  return leader_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppendEntriesRequest::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name != NULL) {
    set_has_leader_name();
  } else {
    clear_has_leader_name();
  }
  leader_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_name);
  // @@protoc_insertion_point(field_set_allocated:raft_msg.AppendEntriesRequest.leader_name)
}

// repeated .raft_msg.LogEntry entries = 6;
int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
const ::raft_msg::LogEntry& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft_msg.AppendEntriesRequest.entries)
  return entries_.Get(index);
}
::raft_msg::LogEntry* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft_msg.AppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
::raft_msg::LogEntry* AppendEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add:raft_msg.AppendEntriesRequest.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_msg::LogEntry >*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft_msg.AppendEntriesRequest.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_msg::LogEntry >&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:raft_msg.AppendEntriesRequest.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_msg

// @@protoc_insertion_point(global_scope)
