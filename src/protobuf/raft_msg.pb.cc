// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_msg {
class RaftMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RaftMessage> {
  public:
  const ::raft_msg::AppendEntriesRequest* append_entries_request_;
  const ::raft_msg::AppendEntriesResponse* append_entries_response_;
  const ::raft_msg::CommandRequest* command_request_;
  const ::raft_msg::CommandResponse* command_response_;
  const ::raft_msg::JoinRequest* join_request_;
  const ::raft_msg::JoinResponse* join_response_;
  const ::raft_msg::LogEntry* log_entry_;
  const ::raft_msg::VoteRequest* vote_request_;
  const ::raft_msg::VoteResponse* vote_response_;
} _RaftMessage_default_instance_;

namespace protobuf_raft_5fmsg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), append_entries_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), append_entries_response_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), command_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), command_response_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), join_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), join_response_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), log_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), vote_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RaftMessage_default_instance_), vote_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, raft_msg_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 14, sizeof(RaftMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RaftMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "raft_msg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _RaftMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::raft_msg::protobuf_append_5fentries_5frequest_2eproto::InitDefaults();
  ::raft_msg::protobuf_append_5fentries_5fresponse_2eproto::InitDefaults();
  ::raft_msg::protobuf_command_5frequest_2eproto::InitDefaults();
  ::raft_msg::protobuf_command_5fresponse_2eproto::InitDefaults();
  ::raft_msg::protobuf_join_5frequest_2eproto::InitDefaults();
  ::raft_msg::protobuf_join_5fresponse_2eproto::InitDefaults();
  ::raft_msg::protobuf_log_5fentry_2eproto::InitDefaults();
  ::raft_msg::protobuf_vote_5frequest_2eproto::InitDefaults();
  ::raft_msg::protobuf_vote_5fresponse_2eproto::InitDefaults();
  _RaftMessage_default_instance_.DefaultConstruct();
  _RaftMessage_default_instance_.append_entries_request_ = const_cast< ::raft_msg::AppendEntriesRequest*>(
      ::raft_msg::AppendEntriesRequest::internal_default_instance());
  _RaftMessage_default_instance_.append_entries_response_ = const_cast< ::raft_msg::AppendEntriesResponse*>(
      ::raft_msg::AppendEntriesResponse::internal_default_instance());
  _RaftMessage_default_instance_.command_request_ = const_cast< ::raft_msg::CommandRequest*>(
      ::raft_msg::CommandRequest::internal_default_instance());
  _RaftMessage_default_instance_.command_response_ = const_cast< ::raft_msg::CommandResponse*>(
      ::raft_msg::CommandResponse::internal_default_instance());
  _RaftMessage_default_instance_.join_request_ = const_cast< ::raft_msg::JoinRequest*>(
      ::raft_msg::JoinRequest::internal_default_instance());
  _RaftMessage_default_instance_.join_response_ = const_cast< ::raft_msg::JoinResponse*>(
      ::raft_msg::JoinResponse::internal_default_instance());
  _RaftMessage_default_instance_.log_entry_ = const_cast< ::raft_msg::LogEntry*>(
      ::raft_msg::LogEntry::internal_default_instance());
  _RaftMessage_default_instance_.vote_request_ = const_cast< ::raft_msg::VoteRequest*>(
      ::raft_msg::VoteRequest::internal_default_instance());
  _RaftMessage_default_instance_.vote_response_ = const_cast< ::raft_msg::VoteResponse*>(
      ::raft_msg::VoteResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016raft_msg.proto\022\010raft_msg\032\034append_entri"
      "es_request.proto\032\035append_entries_respons"
      "e.proto\032\025command_request.proto\032\026command_"
      "response.proto\032\022join_request.proto\032\023join"
      "_response.proto\032\017log_entry.proto\032\022vote_r"
      "equest.proto\032\023vote_response.proto\"\364\003\n\013Ra"
      "ftMessage\022@\n\026append_entries_request\030\001 \001("
      "\0132\036.raft_msg.AppendEntriesRequestH\000\022B\n\027a"
      "ppend_entries_response\030\002 \001(\0132\037.raft_msg."
      "AppendEntriesResponseH\000\0223\n\017command_reque"
      "st\030\003 \001(\0132\030.raft_msg.CommandRequestH\000\0225\n\020"
      "command_response\030\004 \001(\0132\031.raft_msg.Comman"
      "dResponseH\000\022-\n\014join_request\030\005 \001(\0132\025.raft"
      "_msg.JoinRequestH\000\022/\n\rjoin_response\030\006 \001("
      "\0132\026.raft_msg.JoinResponseH\000\022\'\n\tlog_entry"
      "\030\007 \001(\0132\022.raft_msg.LogEntryH\000\022-\n\014vote_req"
      "uest\030\010 \001(\0132\025.raft_msg.VoteRequestH\000\022/\n\rv"
      "ote_response\030\t \001(\0132\026.raft_msg.VoteRespon"
      "seH\000B\n\n\010raft_msg"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_msg.proto", &protobuf_RegisterTypes);
  ::raft_msg::protobuf_append_5fentries_5frequest_2eproto::AddDescriptors();
  ::raft_msg::protobuf_append_5fentries_5fresponse_2eproto::AddDescriptors();
  ::raft_msg::protobuf_command_5frequest_2eproto::AddDescriptors();
  ::raft_msg::protobuf_command_5fresponse_2eproto::AddDescriptors();
  ::raft_msg::protobuf_join_5frequest_2eproto::AddDescriptors();
  ::raft_msg::protobuf_join_5fresponse_2eproto::AddDescriptors();
  ::raft_msg::protobuf_log_5fentry_2eproto::AddDescriptors();
  ::raft_msg::protobuf_vote_5frequest_2eproto::AddDescriptors();
  ::raft_msg::protobuf_vote_5fresponse_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_raft_5fmsg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftMessage::kAppendEntriesRequestFieldNumber;
const int RaftMessage::kAppendEntriesResponseFieldNumber;
const int RaftMessage::kCommandRequestFieldNumber;
const int RaftMessage::kCommandResponseFieldNumber;
const int RaftMessage::kJoinRequestFieldNumber;
const int RaftMessage::kJoinResponseFieldNumber;
const int RaftMessage::kLogEntryFieldNumber;
const int RaftMessage::kVoteRequestFieldNumber;
const int RaftMessage::kVoteResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftMessage::RaftMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_msg.RaftMessage)
}
RaftMessage::RaftMessage(const RaftMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_raft_msg();
  switch (from.raft_msg_case()) {
    case kAppendEntriesRequest: {
      mutable_append_entries_request()->::raft_msg::AppendEntriesRequest::MergeFrom(from.append_entries_request());
      break;
    }
    case kAppendEntriesResponse: {
      mutable_append_entries_response()->::raft_msg::AppendEntriesResponse::MergeFrom(from.append_entries_response());
      break;
    }
    case kCommandRequest: {
      mutable_command_request()->::raft_msg::CommandRequest::MergeFrom(from.command_request());
      break;
    }
    case kCommandResponse: {
      mutable_command_response()->::raft_msg::CommandResponse::MergeFrom(from.command_response());
      break;
    }
    case kJoinRequest: {
      mutable_join_request()->::raft_msg::JoinRequest::MergeFrom(from.join_request());
      break;
    }
    case kJoinResponse: {
      mutable_join_response()->::raft_msg::JoinResponse::MergeFrom(from.join_response());
      break;
    }
    case kLogEntry: {
      mutable_log_entry()->::raft_msg::LogEntry::MergeFrom(from.log_entry());
      break;
    }
    case kVoteRequest: {
      mutable_vote_request()->::raft_msg::VoteRequest::MergeFrom(from.vote_request());
      break;
    }
    case kVoteResponse: {
      mutable_vote_response()->::raft_msg::VoteResponse::MergeFrom(from.vote_response());
      break;
    }
    case RAFT_MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:raft_msg.RaftMessage)
}

void RaftMessage::SharedCtor() {
  _cached_size_ = 0;
  clear_has_raft_msg();
}

RaftMessage::~RaftMessage() {
  // @@protoc_insertion_point(destructor:raft_msg.RaftMessage)
  SharedDtor();
}

void RaftMessage::SharedDtor() {
  if (has_raft_msg()) {
    clear_raft_msg();
  }
}

void RaftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessage::descriptor() {
  protobuf_raft_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fmsg_2eproto::file_level_metadata[0].descriptor;
}

const RaftMessage& RaftMessage::default_instance() {
  protobuf_raft_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

RaftMessage* RaftMessage::New(::google::protobuf::Arena* arena) const {
  RaftMessage* n = new RaftMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftMessage::clear_raft_msg() {
// @@protoc_insertion_point(one_of_clear_start:raft_msg.RaftMessage)
  switch (raft_msg_case()) {
    case kAppendEntriesRequest: {
      delete raft_msg_.append_entries_request_;
      break;
    }
    case kAppendEntriesResponse: {
      delete raft_msg_.append_entries_response_;
      break;
    }
    case kCommandRequest: {
      delete raft_msg_.command_request_;
      break;
    }
    case kCommandResponse: {
      delete raft_msg_.command_response_;
      break;
    }
    case kJoinRequest: {
      delete raft_msg_.join_request_;
      break;
    }
    case kJoinResponse: {
      delete raft_msg_.join_response_;
      break;
    }
    case kLogEntry: {
      delete raft_msg_.log_entry_;
      break;
    }
    case kVoteRequest: {
      delete raft_msg_.vote_request_;
      break;
    }
    case kVoteResponse: {
      delete raft_msg_.vote_response_;
      break;
    }
    case RAFT_MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RAFT_MSG_NOT_SET;
}


void RaftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_msg.RaftMessage)
  clear_raft_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RaftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_msg.RaftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_msg.AppendEntriesRequest append_entries_request = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_entries_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .raft_msg.AppendEntriesResponse append_entries_response = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_entries_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .raft_msg.CommandRequest command_request = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .raft_msg.CommandResponse command_response = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .raft_msg.JoinRequest join_request = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .raft_msg.JoinResponse join_response = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .raft_msg.LogEntry log_entry = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .raft_msg.VoteRequest vote_request = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .raft_msg.VoteResponse vote_response = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_msg.RaftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_msg.RaftMessage)
  return false;
#undef DO_
}

void RaftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_msg.RaftMessage)
  switch (raft_msg_case()) {
    case kAppendEntriesRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *raft_msg_.append_entries_request_, output);
      break;
    case kAppendEntriesResponse:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *raft_msg_.append_entries_response_, output);
      break;
    case kCommandRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *raft_msg_.command_request_, output);
      break;
    case kCommandResponse:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *raft_msg_.command_response_, output);
      break;
    case kJoinRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *raft_msg_.join_request_, output);
      break;
    case kJoinResponse:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *raft_msg_.join_response_, output);
      break;
    case kLogEntry:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *raft_msg_.log_entry_, output);
      break;
    case kVoteRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *raft_msg_.vote_request_, output);
      break;
    case kVoteResponse:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *raft_msg_.vote_response_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_msg.RaftMessage)
}

::google::protobuf::uint8* RaftMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_msg.RaftMessage)
  switch (raft_msg_case()) {
    case kAppendEntriesRequest:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *raft_msg_.append_entries_request_, false, target);
      break;
    case kAppendEntriesResponse:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *raft_msg_.append_entries_response_, false, target);
      break;
    case kCommandRequest:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *raft_msg_.command_request_, false, target);
      break;
    case kCommandResponse:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *raft_msg_.command_response_, false, target);
      break;
    case kJoinRequest:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *raft_msg_.join_request_, false, target);
      break;
    case kJoinResponse:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *raft_msg_.join_response_, false, target);
      break;
    case kLogEntry:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *raft_msg_.log_entry_, false, target);
      break;
    case kVoteRequest:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *raft_msg_.vote_request_, false, target);
      break;
    case kVoteResponse:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *raft_msg_.vote_response_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_msg.RaftMessage)
  return target;
}

size_t RaftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_msg.RaftMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (raft_msg_case()) {
    // optional .raft_msg.AppendEntriesRequest append_entries_request = 1;
    case kAppendEntriesRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.append_entries_request_);
      break;
    }
    // optional .raft_msg.AppendEntriesResponse append_entries_response = 2;
    case kAppendEntriesResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.append_entries_response_);
      break;
    }
    // optional .raft_msg.CommandRequest command_request = 3;
    case kCommandRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.command_request_);
      break;
    }
    // optional .raft_msg.CommandResponse command_response = 4;
    case kCommandResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.command_response_);
      break;
    }
    // optional .raft_msg.JoinRequest join_request = 5;
    case kJoinRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.join_request_);
      break;
    }
    // optional .raft_msg.JoinResponse join_response = 6;
    case kJoinResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.join_response_);
      break;
    }
    // optional .raft_msg.LogEntry log_entry = 7;
    case kLogEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.log_entry_);
      break;
    }
    // optional .raft_msg.VoteRequest vote_request = 8;
    case kVoteRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.vote_request_);
      break;
    }
    // optional .raft_msg.VoteResponse vote_response = 9;
    case kVoteResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *raft_msg_.vote_response_);
      break;
    }
    case RAFT_MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_msg.RaftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_msg.RaftMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_msg.RaftMessage)
    MergeFrom(*source);
  }
}

void RaftMessage::MergeFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_msg.RaftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.raft_msg_case()) {
    case kAppendEntriesRequest: {
      mutable_append_entries_request()->::raft_msg::AppendEntriesRequest::MergeFrom(from.append_entries_request());
      break;
    }
    case kAppendEntriesResponse: {
      mutable_append_entries_response()->::raft_msg::AppendEntriesResponse::MergeFrom(from.append_entries_response());
      break;
    }
    case kCommandRequest: {
      mutable_command_request()->::raft_msg::CommandRequest::MergeFrom(from.command_request());
      break;
    }
    case kCommandResponse: {
      mutable_command_response()->::raft_msg::CommandResponse::MergeFrom(from.command_response());
      break;
    }
    case kJoinRequest: {
      mutable_join_request()->::raft_msg::JoinRequest::MergeFrom(from.join_request());
      break;
    }
    case kJoinResponse: {
      mutable_join_response()->::raft_msg::JoinResponse::MergeFrom(from.join_response());
      break;
    }
    case kLogEntry: {
      mutable_log_entry()->::raft_msg::LogEntry::MergeFrom(from.log_entry());
      break;
    }
    case kVoteRequest: {
      mutable_vote_request()->::raft_msg::VoteRequest::MergeFrom(from.vote_request());
      break;
    }
    case kVoteResponse: {
      mutable_vote_response()->::raft_msg::VoteResponse::MergeFrom(from.vote_response());
      break;
    }
    case RAFT_MSG_NOT_SET: {
      break;
    }
  }
}

void RaftMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_msg.RaftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessage::CopyFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_msg.RaftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessage::IsInitialized() const {
  switch (raft_msg_case()) {
    case kAppendEntriesRequest: {
      if (has_append_entries_request()) {
        if (!this->append_entries_request().IsInitialized()) return false;
      }
      break;
    }
    case kAppendEntriesResponse: {
      if (has_append_entries_response()) {
        if (!this->append_entries_response().IsInitialized()) return false;
      }
      break;
    }
    case kCommandRequest: {
      if (has_command_request()) {
        if (!this->command_request().IsInitialized()) return false;
      }
      break;
    }
    case kCommandResponse: {
      if (has_command_response()) {
        if (!this->command_response().IsInitialized()) return false;
      }
      break;
    }
    case kJoinRequest: {
      if (has_join_request()) {
        if (!this->join_request().IsInitialized()) return false;
      }
      break;
    }
    case kJoinResponse: {
      if (has_join_response()) {
        if (!this->join_response().IsInitialized()) return false;
      }
      break;
    }
    case kLogEntry: {
      if (has_log_entry()) {
        if (!this->log_entry().IsInitialized()) return false;
      }
      break;
    }
    case kVoteRequest: {
      if (has_vote_request()) {
        if (!this->vote_request().IsInitialized()) return false;
      }
      break;
    }
    case kVoteResponse: {
      if (has_vote_response()) {
        if (!this->vote_response().IsInitialized()) return false;
      }
      break;
    }
    case RAFT_MSG_NOT_SET: {
      break;
    }
  }
  return true;
}

void RaftMessage::Swap(RaftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftMessage::InternalSwap(RaftMessage* other) {
  std::swap(raft_msg_, other->raft_msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftMessage::GetMetadata() const {
  protobuf_raft_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fmsg_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftMessage

// optional .raft_msg.AppendEntriesRequest append_entries_request = 1;
bool RaftMessage::has_append_entries_request() const {
  return raft_msg_case() == kAppendEntriesRequest;
}
void RaftMessage::set_has_append_entries_request() {
  _oneof_case_[0] = kAppendEntriesRequest;
}
void RaftMessage::clear_append_entries_request() {
  if (has_append_entries_request()) {
    delete raft_msg_.append_entries_request_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::AppendEntriesRequest& RaftMessage::append_entries_request() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.append_entries_request)
  return has_append_entries_request()
      ? *raft_msg_.append_entries_request_
      : ::raft_msg::AppendEntriesRequest::default_instance();
}
::raft_msg::AppendEntriesRequest* RaftMessage::mutable_append_entries_request() {
  if (!has_append_entries_request()) {
    clear_raft_msg();
    set_has_append_entries_request();
    raft_msg_.append_entries_request_ = new ::raft_msg::AppendEntriesRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.append_entries_request)
  return raft_msg_.append_entries_request_;
}
::raft_msg::AppendEntriesRequest* RaftMessage::release_append_entries_request() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.append_entries_request)
  if (has_append_entries_request()) {
    clear_has_raft_msg();
    ::raft_msg::AppendEntriesRequest* temp = raft_msg_.append_entries_request_;
    raft_msg_.append_entries_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_append_entries_request(::raft_msg::AppendEntriesRequest* append_entries_request) {
  clear_raft_msg();
  if (append_entries_request) {
    set_has_append_entries_request();
    raft_msg_.append_entries_request_ = append_entries_request;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.append_entries_request)
}

// optional .raft_msg.AppendEntriesResponse append_entries_response = 2;
bool RaftMessage::has_append_entries_response() const {
  return raft_msg_case() == kAppendEntriesResponse;
}
void RaftMessage::set_has_append_entries_response() {
  _oneof_case_[0] = kAppendEntriesResponse;
}
void RaftMessage::clear_append_entries_response() {
  if (has_append_entries_response()) {
    delete raft_msg_.append_entries_response_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::AppendEntriesResponse& RaftMessage::append_entries_response() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.append_entries_response)
  return has_append_entries_response()
      ? *raft_msg_.append_entries_response_
      : ::raft_msg::AppendEntriesResponse::default_instance();
}
::raft_msg::AppendEntriesResponse* RaftMessage::mutable_append_entries_response() {
  if (!has_append_entries_response()) {
    clear_raft_msg();
    set_has_append_entries_response();
    raft_msg_.append_entries_response_ = new ::raft_msg::AppendEntriesResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.append_entries_response)
  return raft_msg_.append_entries_response_;
}
::raft_msg::AppendEntriesResponse* RaftMessage::release_append_entries_response() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.append_entries_response)
  if (has_append_entries_response()) {
    clear_has_raft_msg();
    ::raft_msg::AppendEntriesResponse* temp = raft_msg_.append_entries_response_;
    raft_msg_.append_entries_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_append_entries_response(::raft_msg::AppendEntriesResponse* append_entries_response) {
  clear_raft_msg();
  if (append_entries_response) {
    set_has_append_entries_response();
    raft_msg_.append_entries_response_ = append_entries_response;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.append_entries_response)
}

// optional .raft_msg.CommandRequest command_request = 3;
bool RaftMessage::has_command_request() const {
  return raft_msg_case() == kCommandRequest;
}
void RaftMessage::set_has_command_request() {
  _oneof_case_[0] = kCommandRequest;
}
void RaftMessage::clear_command_request() {
  if (has_command_request()) {
    delete raft_msg_.command_request_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::CommandRequest& RaftMessage::command_request() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.command_request)
  return has_command_request()
      ? *raft_msg_.command_request_
      : ::raft_msg::CommandRequest::default_instance();
}
::raft_msg::CommandRequest* RaftMessage::mutable_command_request() {
  if (!has_command_request()) {
    clear_raft_msg();
    set_has_command_request();
    raft_msg_.command_request_ = new ::raft_msg::CommandRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.command_request)
  return raft_msg_.command_request_;
}
::raft_msg::CommandRequest* RaftMessage::release_command_request() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.command_request)
  if (has_command_request()) {
    clear_has_raft_msg();
    ::raft_msg::CommandRequest* temp = raft_msg_.command_request_;
    raft_msg_.command_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_command_request(::raft_msg::CommandRequest* command_request) {
  clear_raft_msg();
  if (command_request) {
    set_has_command_request();
    raft_msg_.command_request_ = command_request;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.command_request)
}

// optional .raft_msg.CommandResponse command_response = 4;
bool RaftMessage::has_command_response() const {
  return raft_msg_case() == kCommandResponse;
}
void RaftMessage::set_has_command_response() {
  _oneof_case_[0] = kCommandResponse;
}
void RaftMessage::clear_command_response() {
  if (has_command_response()) {
    delete raft_msg_.command_response_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::CommandResponse& RaftMessage::command_response() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.command_response)
  return has_command_response()
      ? *raft_msg_.command_response_
      : ::raft_msg::CommandResponse::default_instance();
}
::raft_msg::CommandResponse* RaftMessage::mutable_command_response() {
  if (!has_command_response()) {
    clear_raft_msg();
    set_has_command_response();
    raft_msg_.command_response_ = new ::raft_msg::CommandResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.command_response)
  return raft_msg_.command_response_;
}
::raft_msg::CommandResponse* RaftMessage::release_command_response() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.command_response)
  if (has_command_response()) {
    clear_has_raft_msg();
    ::raft_msg::CommandResponse* temp = raft_msg_.command_response_;
    raft_msg_.command_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_command_response(::raft_msg::CommandResponse* command_response) {
  clear_raft_msg();
  if (command_response) {
    set_has_command_response();
    raft_msg_.command_response_ = command_response;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.command_response)
}

// optional .raft_msg.JoinRequest join_request = 5;
bool RaftMessage::has_join_request() const {
  return raft_msg_case() == kJoinRequest;
}
void RaftMessage::set_has_join_request() {
  _oneof_case_[0] = kJoinRequest;
}
void RaftMessage::clear_join_request() {
  if (has_join_request()) {
    delete raft_msg_.join_request_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::JoinRequest& RaftMessage::join_request() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.join_request)
  return has_join_request()
      ? *raft_msg_.join_request_
      : ::raft_msg::JoinRequest::default_instance();
}
::raft_msg::JoinRequest* RaftMessage::mutable_join_request() {
  if (!has_join_request()) {
    clear_raft_msg();
    set_has_join_request();
    raft_msg_.join_request_ = new ::raft_msg::JoinRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.join_request)
  return raft_msg_.join_request_;
}
::raft_msg::JoinRequest* RaftMessage::release_join_request() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.join_request)
  if (has_join_request()) {
    clear_has_raft_msg();
    ::raft_msg::JoinRequest* temp = raft_msg_.join_request_;
    raft_msg_.join_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_join_request(::raft_msg::JoinRequest* join_request) {
  clear_raft_msg();
  if (join_request) {
    set_has_join_request();
    raft_msg_.join_request_ = join_request;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.join_request)
}

// optional .raft_msg.JoinResponse join_response = 6;
bool RaftMessage::has_join_response() const {
  return raft_msg_case() == kJoinResponse;
}
void RaftMessage::set_has_join_response() {
  _oneof_case_[0] = kJoinResponse;
}
void RaftMessage::clear_join_response() {
  if (has_join_response()) {
    delete raft_msg_.join_response_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::JoinResponse& RaftMessage::join_response() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.join_response)
  return has_join_response()
      ? *raft_msg_.join_response_
      : ::raft_msg::JoinResponse::default_instance();
}
::raft_msg::JoinResponse* RaftMessage::mutable_join_response() {
  if (!has_join_response()) {
    clear_raft_msg();
    set_has_join_response();
    raft_msg_.join_response_ = new ::raft_msg::JoinResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.join_response)
  return raft_msg_.join_response_;
}
::raft_msg::JoinResponse* RaftMessage::release_join_response() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.join_response)
  if (has_join_response()) {
    clear_has_raft_msg();
    ::raft_msg::JoinResponse* temp = raft_msg_.join_response_;
    raft_msg_.join_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_join_response(::raft_msg::JoinResponse* join_response) {
  clear_raft_msg();
  if (join_response) {
    set_has_join_response();
    raft_msg_.join_response_ = join_response;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.join_response)
}

// optional .raft_msg.LogEntry log_entry = 7;
bool RaftMessage::has_log_entry() const {
  return raft_msg_case() == kLogEntry;
}
void RaftMessage::set_has_log_entry() {
  _oneof_case_[0] = kLogEntry;
}
void RaftMessage::clear_log_entry() {
  if (has_log_entry()) {
    delete raft_msg_.log_entry_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::LogEntry& RaftMessage::log_entry() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.log_entry)
  return has_log_entry()
      ? *raft_msg_.log_entry_
      : ::raft_msg::LogEntry::default_instance();
}
::raft_msg::LogEntry* RaftMessage::mutable_log_entry() {
  if (!has_log_entry()) {
    clear_raft_msg();
    set_has_log_entry();
    raft_msg_.log_entry_ = new ::raft_msg::LogEntry;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.log_entry)
  return raft_msg_.log_entry_;
}
::raft_msg::LogEntry* RaftMessage::release_log_entry() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.log_entry)
  if (has_log_entry()) {
    clear_has_raft_msg();
    ::raft_msg::LogEntry* temp = raft_msg_.log_entry_;
    raft_msg_.log_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_log_entry(::raft_msg::LogEntry* log_entry) {
  clear_raft_msg();
  if (log_entry) {
    set_has_log_entry();
    raft_msg_.log_entry_ = log_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.log_entry)
}

// optional .raft_msg.VoteRequest vote_request = 8;
bool RaftMessage::has_vote_request() const {
  return raft_msg_case() == kVoteRequest;
}
void RaftMessage::set_has_vote_request() {
  _oneof_case_[0] = kVoteRequest;
}
void RaftMessage::clear_vote_request() {
  if (has_vote_request()) {
    delete raft_msg_.vote_request_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::VoteRequest& RaftMessage::vote_request() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.vote_request)
  return has_vote_request()
      ? *raft_msg_.vote_request_
      : ::raft_msg::VoteRequest::default_instance();
}
::raft_msg::VoteRequest* RaftMessage::mutable_vote_request() {
  if (!has_vote_request()) {
    clear_raft_msg();
    set_has_vote_request();
    raft_msg_.vote_request_ = new ::raft_msg::VoteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.vote_request)
  return raft_msg_.vote_request_;
}
::raft_msg::VoteRequest* RaftMessage::release_vote_request() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.vote_request)
  if (has_vote_request()) {
    clear_has_raft_msg();
    ::raft_msg::VoteRequest* temp = raft_msg_.vote_request_;
    raft_msg_.vote_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_vote_request(::raft_msg::VoteRequest* vote_request) {
  clear_raft_msg();
  if (vote_request) {
    set_has_vote_request();
    raft_msg_.vote_request_ = vote_request;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.vote_request)
}

// optional .raft_msg.VoteResponse vote_response = 9;
bool RaftMessage::has_vote_response() const {
  return raft_msg_case() == kVoteResponse;
}
void RaftMessage::set_has_vote_response() {
  _oneof_case_[0] = kVoteResponse;
}
void RaftMessage::clear_vote_response() {
  if (has_vote_response()) {
    delete raft_msg_.vote_response_;
    clear_has_raft_msg();
  }
}
 const ::raft_msg::VoteResponse& RaftMessage::vote_response() const {
  // @@protoc_insertion_point(field_get:raft_msg.RaftMessage.vote_response)
  return has_vote_response()
      ? *raft_msg_.vote_response_
      : ::raft_msg::VoteResponse::default_instance();
}
::raft_msg::VoteResponse* RaftMessage::mutable_vote_response() {
  if (!has_vote_response()) {
    clear_raft_msg();
    set_has_vote_response();
    raft_msg_.vote_response_ = new ::raft_msg::VoteResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_msg.RaftMessage.vote_response)
  return raft_msg_.vote_response_;
}
::raft_msg::VoteResponse* RaftMessage::release_vote_response() {
  // @@protoc_insertion_point(field_release:raft_msg.RaftMessage.vote_response)
  if (has_vote_response()) {
    clear_has_raft_msg();
    ::raft_msg::VoteResponse* temp = raft_msg_.vote_response_;
    raft_msg_.vote_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RaftMessage::set_allocated_vote_response(::raft_msg::VoteResponse* vote_response) {
  clear_raft_msg();
  if (vote_response) {
    set_has_vote_response();
    raft_msg_.vote_response_ = vote_response;
  }
  // @@protoc_insertion_point(field_set_allocated:raft_msg.RaftMessage.vote_response)
}

bool RaftMessage::has_raft_msg() const {
  return raft_msg_case() != RAFT_MSG_NOT_SET;
}
void RaftMessage::clear_has_raft_msg() {
  _oneof_case_[0] = RAFT_MSG_NOT_SET;
}
RaftMessage::RaftMsgCase RaftMessage::raft_msg_case() const {
  return RaftMessage::RaftMsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_msg

// @@protoc_insertion_point(global_scope)
